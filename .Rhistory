install.pacakges('rJava')
install.packages('rJava')
library(rJava)
install.packages('xlsx')
install.packages('RCurl')
source('~/esther_data/esther_data.R', echo=TRUE)
?getURLConetent
?getURLContent
?getURL
getURL('https://esther.rice.edu/selfserve/swkscmt.main')
getURLContent('https://esther.rice.edu/selfserve/swkscmt.main')
getURL('https://esther.rice.edu/selfserve/swkscmt.main')
loginpage <- getURL('https://esther.rice.edu/selfserve/swkscmt.main', curl = ch)
ch <- getCurlHandle()
loginpage <- getURL('https://esther.rice.edu/selfserve/swkscmt.main', curl = ch)
loginpage <- getURL(loginURL, curl = ch)
ch <- getCurlHandle()
loginpage <- getURL(loginURL, curl = ch)
loginURL <- 'https://esther.rice.edu/selfserve/twbkwbis.P_WWWLogin'
loginpage <- getURL(loginURL, curl = ch)
library(stringr)
?postForm
loginURL <- 'https://esther.rice.edu/selfserve/twbkwbis.P_WWWLogin'
?grep
grep(loginpage, "galx")
grep("galx", loginpage)
grep("GALX", loginpage)
password <- "aa12051992"
username <- "S01149891"
?getPost
?getPOST
?postURL
?authenticatePage
?postForm
authPage <- postForm(authURL, .params = list(sid = username, PIN = password), curl = ch)
authURL <- "https://esther.rice.edu/selfserve/twbkwbis.P_WWWLogin"
authPage <- postForm(authURL, .params = list(sid = username, PIN = password), curl = ch)
curlSetOpt(curl = ch,
ssl.verifypeer = FALSE,
useragent = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13",
timeout = 60,
followlocation = TRUE,
cookiejar = "./cookies",
cookiefile = "./cookies")
loginpage <- getURL(loginURL, curl = ch)
authPage <- postForm(authURL, .params = list(sid = username, PIN = password), curl = ch)
postForm(authURL, .params = list(sid = username, PIN = password), curl = ch)
authPage <- postForm(authURL, sid = username, PIN = password, submitButton = "Login", style = "POST", curl = ch)
postForm(https://esther.rice.edu/selfserve/twbkwbis.P_WWWLogin)
postForm("https://esther.rice.edu/selfserve/twbkwbis.P_WWWLogin")
postForm(authURL)
postForm(authURL, sid = username, PIN = password)
postForm(authURL, User ID = username)
postForm(authURL, UserID = username)
postForm(authURL, UserID = username)
username
password
postForm(authURL, PIN = username)
postForm(authURL, submitButton = username, submitButton = "Login)
postForm(authURL, submitButton = username, submitButton = "Login)
postForm(authURL, submitButton = username, submitButton = "Login")
postForm(authURL, sid = username, submitButton = "Login")
postForm(authURL, UserID = username, submitButton = "Login")
postForm("http://wwwx.cs.unc.edu/~jbs/aw-wwwp/docs/resources/perl/perl-cgi/programs/cgi_stdin.cgi",
name = "Bob", "checkedbox" = "spinich",
submitButton = "Now!",
textarea = "Some text to send",
selectitem = "The item",
radiobutton = "a", style = "POST")
loginpage
postForm(authURL, UserID = username, submitButton = "loginform")
postForm(authURL)
postForm(authURL, UserID = 'S01149891')
library(devtools)
install_github('httr')
?httr
library(httr)
POST(authURL, body = list(UserID = username))
GET("http://google.com/", path = "search")
GET("http://google.com/", path = "search", query = c(q = "ham"))
data <- "This is an example of input text. We're not sure how long it's going to be"
data
data <- "This is an example of input text. We're not sure how long
it's going to be"
data <- "This is an example of input text. We're not sure how long
it's going to be. This is just a silly example"
data
library(tm)
install.packages)
install.packages()
install.packages('tm')
library(tm)
Corpus(data)
Corpus(VectorSource(data))
corpus <- Corpus(VectorSource(data))
?Corpus
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
removeURL <- function(x) {
gsub("http[[:alnum:]]*", "", x)
}
corpus <- tm_map(corpus, removeURL)
myStopwords <- c(stopwords('english'), "available", "via")
corpus <- tm_map(corpus, removeWords, myStopwords)
TDM <- TermDocumentMatrix(corpus, control=list(worldLengths=c(1,Inf)))
TDM
findFreqTerms(myTdm, lowfreq=10)
findFreqTerms(TDM, lowfreq=1)
m <- as.matrix(TDM)
dist_matrix <- dist(scale(m))
fit <- hclust(dist, method="ward")
TDM2 <- removeSparseTerms(TDM, sparse=0.95)
TDM2
m <- as.matrix(TDM)
dist_matrix <- dist(scale(m))
fit <- hclust(dist_matrix, method="ward")
plot(fit)
rect.hclust(fit, k = 10)
rect.hclust(fit, k = 5)
(groups <- cutree(fit, k=10))
(groups <- cutree(fit, k=5))
num_clusters <- 3
rect.hclust(fit, k = num_clusters)
(groups <- cutree(fit, k = num_clusters))
num_clusters <- 3
rect.hclust(fit, k = num_clusters)
(groups <- cutree(fit, k = num_clusters))
source('~/.active-rstudio-document')
library(ggplot2)
library(caret)
set.seed(25)
### Read in given data sets.
# All variables are factors, let's go ahead and make the conversions.
test <- read.csv("Data/test.csv", colClasses = c(rep("factor", 10)))
train <- read.csv("Data/train.csv", colClasses = c(rep("factor", 10)))
sample_submit <- read.csv("Data/sampleSubmission.csv")
### Preprocessing
variables <- c("RESOURCE", "MGR_ID", "ROLE_ROLLUP_1", "ROLE_ROLLUP_2",
"ROLE_DEPTNAME", "ROLE_TITLE", "ROLE_FAMILY_DESC",
"ROLE_FAMILY", "ROLE_CODE")
# Generate counts column for each variable
train_process <- train
for (var in variables) {
count_var <- eval(parse(text = paste0("as.data.frame(table(train$", var, "))")))
names(count_var) <- c(var, paste0(var, "_count"))
train_process <- join(train_process, count_var, type = "full", match = "all")
}
tp <- train_process
setwd("~/kaggle-access")
library(ggplot2)
library(caret)
set.seed(25)
### Read in given data sets.
# All variables are factors, let's go ahead and make the conversions.
test <- read.csv("Data/test.csv", colClasses = c(rep("factor", 10)))
train <- read.csv("Data/train.csv", colClasses = c(rep("factor", 10)))
sample_submit <- read.csv("Data/sampleSubmission.csv")
### Preprocessing
variables <- c("RESOURCE", "MGR_ID", "ROLE_ROLLUP_1", "ROLE_ROLLUP_2",
"ROLE_DEPTNAME", "ROLE_TITLE", "ROLE_FAMILY_DESC",
"ROLE_FAMILY", "ROLE_CODE")
# Generate counts column for each variable
train_process <- train
for (var in variables) {
count_var <- eval(parse(text = paste0("as.data.frame(table(train$", var, "))")))
names(count_var) <- c(var, paste0(var, "_count"))
train_process <- join(train_process, count_var, type = "full", match = "all")
}
tp <- train_process
head(tp)
qplot(data = tp, x = MGR_ID_count)
qplot(data = tp, x = MGR_ID_count) + geom_vline(10)
qplot(data = tp, x = MGR_ID_count) + geom_vline(xintercept = 10)
qplot(data = tp, x = MGR_ID_count) + geom_vline(xintercept = 10, color = "red")
?range
range(tp$MGR_ID_count)
152/2
152/5
qplot(data = tp, x = MGR_ID_count, binwidth = 30.4) + geom_vline(xintercept = 10, color = "red")
qplot(data = tp, x = MGR_ID_count, binwidth = 30) + geom_vline(xintercept = 10, color = "red")
max(tp$MGR_ID_count)
qplot(data = tp, x = MGR_ID_count, binwidth = 30)
head(tp)
qplot(data = tp, x = ROLE_ROLLUP_1_count, binwidth = 30)
qplot(data = tp, x = MGR_ID_count, binwidth = 30, fill = ACTION)
qplot(data = tp, x = ROLE_ROLLUP_1_count, binwidth = 30, fill = ACTION)
ggplot(tp, aes(x = MGR_ID_count)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
scale_y_continuous(formatter = 'percent')
ggplot(tp, aes(x = MGR_ID_count)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
qplot(data = tp, x = MGR_ID_count, binwidth = 30, fill = ACTION)
qplot(data = tp, x = MGR_ID_count)
ggplot(tp, aes(x = MGR_ID_count)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(tp, aes(x = MGR_ID_count, fill = ACTION)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(tp, aes(x = MGR_ID_count, fill = ACTION)) +
geom_bar(aes(y = (..count..)/sum(..count..)), binwidth = 30)
qplot(data = tp, x = MGR_ID_count, binwidth = 30, fill = ACTION)
qplot(data = tp, x = MGR_ID_count, binwidth = 30, fill = ACTION, geom = "density")
qplot(data = tp, x = MGR_ID_count, binwidth = 30, fill = ACTION, position = "dodge")
max(tp$MGR_ID_count)
152/2
qplot(data = tp, x = MGR_ID_count, binwidth = 76, fill = ACTION, position = "dodge")
